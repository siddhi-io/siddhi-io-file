{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO File The siddhi-io-file extension is an extension to Siddhi which used to receive/publish event data from/to file. It supports both binary and text formats. The siddhi-io-file extension supports local data storage and also following file protocols for file/folder, read/write operations FTP SFTP SMB WebDav Examples FTP Sink @ sink ( type = file , @ map ( type = json ), append = true , file . uri = ftp://bob:password@localhost:21/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ source ( type = file , mode = line , file . uri = ftp://bob:password@localhost:21/source/published.json , action . after . process = keep , tailing = false , @ map ( type = json )) define stream FooStream ( symbol string , price float , volume long ); SFTP Sink @ sink ( type = file , @ map ( type = json ), append = false , file . system . options = USER_DIR_IS_ROOT:false,AVOID_PERMISSION_CHECK:true , file . uri = sftp://demo:demo@localhost:22/sftp/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ source ( type = file , mode = line , file . uri = sftp://demo:demo@localhost:22/sftp/source/published.json , action . after . process = keep , tailing = false , file . system . options = USER_DIR_IS_ROOT:false,AVOID_PERMISSION_CHECK:true , @ map ( type = json )) define stream FooStream ( symbol string , price float , volume long ); SMB Sink @ sink ( type = file , @ map ( type = json ), append = true , file . uri = smb://ubuntu:admin@212.47.250.24/sambashare/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ source ( type = file , mode = line , file . uri = smb://ubuntu:admin@212.47.250.24/sambashare/source/published.json , action . after . process = keep , tailing = false , @ map ( type = json )) define stream FooStream ( symbol string , price float , volume long ); WebDav Sink @ sink ( type = file , @ map ( type = json ), append = true , file . uri = webdav://alice:secret1234@localhost/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ sink ( type = file , @ map ( type = json ), append = false , file . uri = webdav://alice:secret1234@localhost/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.22 . Features isDirectory ( Function ) This function checks for a given file path points to a directory isExist ( Function ) This function checks whether a file or a folder exists in a given path isFile ( Function ) This function checks for a given file path points to a file lastModifiedTime ( Function ) Checks for the last modified time for a given file path size ( Function ) This function checks for a given file's size archive ( Stream Function ) Archives files and folders as a zip or in tar format that are available in the given file uri. copy ( Stream Function ) This function performs copying file from one directory to another. create ( Stream Function ) Create a file or a folder in the given location delete ( Stream Function ) Deletes file/files in a particular path move ( Stream Function ) This function performs copying file from one directory to another. rename ( Stream Function ) This method can be used to rename a file/folder in a particular path, move a file from to a different path. Ex- file:rename('/User/wso2/source', 'User/wso2/destination') file:rename('/User/wso2/source/file.csv', 'User/wso2/source/newFile.csv') file:rename('/User/wso2/source/file.csv', 'User/wso2/destination/file.csv') search ( Stream Function ) Searches files in a given folder and lists. searchInArchive ( Stream Function ) This. unarchive ( Stream Function ) This function decompresses a given file file ( Sink ) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files file ( Source ) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. fileeventlistener ( Source ) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension and to add the dependent jars on various siddhi execution environments refer Siddhi documentation section on adding extensions and jars . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Welcome"},{"location":"#siddhi-io-file","text":"The siddhi-io-file extension is an extension to Siddhi which used to receive/publish event data from/to file. It supports both binary and text formats. The siddhi-io-file extension supports local data storage and also following file protocols for file/folder, read/write operations FTP SFTP SMB WebDav","title":"Siddhi IO File"},{"location":"#examples","text":"","title":"Examples"},{"location":"#ftp","text":"Sink @ sink ( type = file , @ map ( type = json ), append = true , file . uri = ftp://bob:password@localhost:21/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ source ( type = file , mode = line , file . uri = ftp://bob:password@localhost:21/source/published.json , action . after . process = keep , tailing = false , @ map ( type = json )) define stream FooStream ( symbol string , price float , volume long );","title":"FTP"},{"location":"#sftp","text":"Sink @ sink ( type = file , @ map ( type = json ), append = false , file . system . options = USER_DIR_IS_ROOT:false,AVOID_PERMISSION_CHECK:true , file . uri = sftp://demo:demo@localhost:22/sftp/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ source ( type = file , mode = line , file . uri = sftp://demo:demo@localhost:22/sftp/source/published.json , action . after . process = keep , tailing = false , file . system . options = USER_DIR_IS_ROOT:false,AVOID_PERMISSION_CHECK:true , @ map ( type = json )) define stream FooStream ( symbol string , price float , volume long );","title":"SFTP"},{"location":"#smb","text":"Sink @ sink ( type = file , @ map ( type = json ), append = true , file . uri = smb://ubuntu:admin@212.47.250.24/sambashare/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ source ( type = file , mode = line , file . uri = smb://ubuntu:admin@212.47.250.24/sambashare/source/published.json , action . after . process = keep , tailing = false , @ map ( type = json )) define stream FooStream ( symbol string , price float , volume long );","title":"SMB"},{"location":"#webdav","text":"Sink @ sink ( type = file , @ map ( type = json ), append = true , file . uri = webdav://alice:secret1234@localhost/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); Source @ sink ( type = file , @ map ( type = json ), append = false , file . uri = webdav://alice:secret1234@localhost/source/published.json ) define stream BarStream ( symbol string , price float , volume long ); For information on Siddhi and it's features refer Siddhi Documentation .","title":"WebDav"},{"location":"#download","text":"Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.22 .","title":"Latest API Docs"},{"location":"#features","text":"isDirectory ( Function ) This function checks for a given file path points to a directory isExist ( Function ) This function checks whether a file or a folder exists in a given path isFile ( Function ) This function checks for a given file path points to a file lastModifiedTime ( Function ) Checks for the last modified time for a given file path size ( Function ) This function checks for a given file's size archive ( Stream Function ) Archives files and folders as a zip or in tar format that are available in the given file uri. copy ( Stream Function ) This function performs copying file from one directory to another. create ( Stream Function ) Create a file or a folder in the given location delete ( Stream Function ) Deletes file/files in a particular path move ( Stream Function ) This function performs copying file from one directory to another. rename ( Stream Function ) This method can be used to rename a file/folder in a particular path, move a file from to a different path. Ex- file:rename('/User/wso2/source', 'User/wso2/destination') file:rename('/User/wso2/source/file.csv', 'User/wso2/source/newFile.csv') file:rename('/User/wso2/source/file.csv', 'User/wso2/destination/file.csv') search ( Stream Function ) Searches files in a given folder and lists. searchInArchive ( Stream Function ) This. unarchive ( Stream Function ) This function decompresses a given file file ( Sink ) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files file ( Source ) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. fileeventlistener ( Source ) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension and to add the dependent jars on various siddhi execution environments refer Siddhi documentation section on adding extensions and jars .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0-M10/","text":"API Docs - v1.0.0-M10 Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"1.0.0-M10"},{"location":"api/1.0.0-M10/#api-docs-v100-m10","text":"","title":"API Docs - v1.0.0-M10"},{"location":"api/1.0.0-M10/#source","text":"","title":"Source"},{"location":"api/1.0.0-M10/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.0-M10/#sink","text":"","title":"Sink"},{"location":"api/1.0.0-M10/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.0-M11/","text":"API Docs - v1.0.0-M11 Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"1.0.0-M11"},{"location":"api/1.0.0-M11/#api-docs-v100-m11","text":"","title":"API Docs - v1.0.0-M11"},{"location":"api/1.0.0-M11/#source","text":"","title":"Source"},{"location":"api/1.0.0-M11/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.0-M11/#sink","text":"","title":"Sink"},{"location":"api/1.0.0-M11/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.0-M12/","text":"API Docs - v1.0.0-M12 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.0-M12"},{"location":"api/1.0.0-M12/#api-docs-v100-m12","text":"","title":"API Docs - v1.0.0-M12"},{"location":"api/1.0.0-M12/#sink","text":"","title":"Sink"},{"location":"api/1.0.0-M12/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.0-M12/#source","text":"","title":"Source"},{"location":"api/1.0.0-M12/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.0/#source","text":"","title":"Source"},{"location":"api/1.0.0/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= /abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= /abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.1/#source","text":"","title":"Source"},{"location":"api/1.0.1/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#sink","text":"","title":"Sink"},{"location":"api/1.0.10/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.10/#source","text":"","title":"Source"},{"location":"api/1.0.10/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#sink","text":"","title":"Sink"},{"location":"api/1.0.11/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.11/#source","text":"","title":"Source"},{"location":"api/1.0.11/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.12/","text":"API Docs - v1.0.12 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.12"},{"location":"api/1.0.12/#api-docs-v1012","text":"","title":"API Docs - v1.0.12"},{"location":"api/1.0.12/#sink","text":"","title":"Sink"},{"location":"api/1.0.12/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.12/#source","text":"","title":"Source"},{"location":"api/1.0.12/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.13/","text":"API Docs - v1.0.13 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.13"},{"location":"api/1.0.13/#api-docs-v1013","text":"","title":"API Docs - v1.0.13"},{"location":"api/1.0.13/#sink","text":"","title":"Sink"},{"location":"api/1.0.13/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.13/#source","text":"","title":"Source"},{"location":"api/1.0.13/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.14/","text":"API Docs - v1.0.14 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.14"},{"location":"api/1.0.14/#api-docs-v1014","text":"","title":"API Docs - v1.0.14"},{"location":"api/1.0.14/#sink","text":"","title":"Sink"},{"location":"api/1.0.14/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.14/#source","text":"","title":"Source"},{"location":"api/1.0.14/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.2/#source","text":"","title":"Source"},{"location":"api/1.0.2/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.3/#source","text":"","title":"Source"},{"location":"api/1.0.3/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.4/#source","text":"","title":"Source"},{"location":"api/1.0.4/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#sink","text":"","title":"Sink"},{"location":"api/1.0.5/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.5/#source","text":"","title":"Source"},{"location":"api/1.0.5/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.6/","text":"API Docs - v1.0.6 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.6"},{"location":"api/1.0.6/#api-docs-v106","text":"","title":"API Docs - v1.0.6"},{"location":"api/1.0.6/#sink","text":"","title":"Sink"},{"location":"api/1.0.6/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.6/#source","text":"","title":"Source"},{"location":"api/1.0.6/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#sink","text":"","title":"Sink"},{"location":"api/1.0.7/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.7/#source","text":"","title":"Source"},{"location":"api/1.0.7/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#sink","text":"","title":"Sink"},{"location":"api/1.0.8/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.8/#source","text":"","title":"Source"},{"location":"api/1.0.8/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#sink","text":"","title":"Sink"},{"location":"api/1.0.9/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.9/#source","text":"","title":"Source"},{"location":"api/1.0.9/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#sink","text":"","title":"Sink"},{"location":"api/1.1.0/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.1.0/#source","text":"","title":"Source"},{"location":"api/1.1.0/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.1.1/","text":"API Docs - v1.1.1 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.1.1"},{"location":"api/1.1.1/#api-docs-v111","text":"","title":"API Docs - v1.1.1"},{"location":"api/1.1.1/#sink","text":"","title":"Sink"},{"location":"api/1.1.1/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.1.1/#source","text":"","title":"Source"},{"location":"api/1.1.1/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#sink","text":"","title":"Sink"},{"location":"api/2.0.0/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.1/","text":"API Docs - v2.0.1 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.1"},{"location":"api/2.0.1/#api-docs-v201","text":"","title":"API Docs - v2.0.1"},{"location":"api/2.0.1/#sink","text":"","title":"Sink"},{"location":"api/2.0.1/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.1/#source","text":"","title":"Source"},{"location":"api/2.0.1/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.10/","text":"API Docs - v2.0.10 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.10"},{"location":"api/2.0.10/#api-docs-v2010","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.10"},{"location":"api/2.0.10/#file","text":"","title":"File"},{"location":"api/2.0.10/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.10/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.10/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.10/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.10/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.10/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.10/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.10/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.10/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.10/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.10/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.10/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.10/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.10/#sink","text":"","title":"Sink"},{"location":"api/2.0.10/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.10/#source","text":"","title":"Source"},{"location":"api/2.0.10/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.10/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.12/","text":"API Docs - v2.0.12 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.12"},{"location":"api/2.0.12/#api-docs-v2012","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.12"},{"location":"api/2.0.12/#file","text":"","title":"File"},{"location":"api/2.0.12/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.12/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.12/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.12/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.12/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.12/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.12/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.12/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.12/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.12/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.12/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.12/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.12/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.12/#sink","text":"","title":"Sink"},{"location":"api/2.0.12/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.12/#source","text":"","title":"Source"},{"location":"api/2.0.12/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.12/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.13/","text":"API Docs - v2.0.13 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.13"},{"location":"api/2.0.13/#api-docs-v2013","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.13"},{"location":"api/2.0.13/#file","text":"","title":"File"},{"location":"api/2.0.13/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.13/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.13/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.13/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.13/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.13/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.13/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.13/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.13/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.13/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.13/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.13/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.13/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.13/#sink","text":"","title":"Sink"},{"location":"api/2.0.13/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.13/#source","text":"","title":"Source"},{"location":"api/2.0.13/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.13/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.14/","text":"API Docs - v2.0.14 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.14"},{"location":"api/2.0.14/#api-docs-v2014","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.14"},{"location":"api/2.0.14/#file","text":"","title":"File"},{"location":"api/2.0.14/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.14/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.14/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.14/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.14/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.14/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.14/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.14/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.14/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.14/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.14/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.14/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.14/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.14/#sink","text":"","title":"Sink"},{"location":"api/2.0.14/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.14/#source","text":"","title":"Source"},{"location":"api/2.0.14/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.14/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.15/","text":"API Docs - v2.0.15 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.15"},{"location":"api/2.0.15/#api-docs-v2015","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.15"},{"location":"api/2.0.15/#file","text":"","title":"File"},{"location":"api/2.0.15/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.15/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.15/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.15/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.15/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.15/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.15/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.15/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.15/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.15/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.15/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.15/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.15/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.15/#sink","text":"","title":"Sink"},{"location":"api/2.0.15/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.15/#source","text":"","title":"Source"},{"location":"api/2.0.15/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.15/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.16/","text":"API Docs - v2.0.16 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.16"},{"location":"api/2.0.16/#api-docs-v2016","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.16"},{"location":"api/2.0.16/#file","text":"","title":"File"},{"location":"api/2.0.16/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.16/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.16/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.16/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.16/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.16/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.16/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.16/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.16/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.16/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.16/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.16/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.16/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.16/#sink","text":"","title":"Sink"},{"location":"api/2.0.16/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.16/#source","text":"","title":"Source"},{"location":"api/2.0.16/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.16/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.17/","text":"API Docs - v2.0.17 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.17"},{"location":"api/2.0.17/#api-docs-v2017","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.17"},{"location":"api/2.0.17/#file","text":"","title":"File"},{"location":"api/2.0.17/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.17/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.17/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.17/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.17/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.17/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.17/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.17/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.17/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.17/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.17/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.17/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.17/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.17/#sink","text":"","title":"Sink"},{"location":"api/2.0.17/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.17/#source","text":"","title":"Source"},{"location":"api/2.0.17/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.17/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.18/","text":"API Docs - v2.0.18 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.18"},{"location":"api/2.0.18/#api-docs-v2018","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.18"},{"location":"api/2.0.18/#file","text":"","title":"File"},{"location":"api/2.0.18/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.18/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.18/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.18/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.18/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.18/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.18/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.18/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.18/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.18/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.18/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.18/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.18/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.18/#sink","text":"","title":"Sink"},{"location":"api/2.0.18/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.18/#source","text":"","title":"Source"},{"location":"api/2.0.18/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.18/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.19/","text":"API Docs - v2.0.19 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.19"},{"location":"api/2.0.19/#api-docs-v2019","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.19"},{"location":"api/2.0.19/#file","text":"","title":"File"},{"location":"api/2.0.19/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.19/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.19/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.19/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.19/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.19/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.19/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.19/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.19/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.19/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.19/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.19/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.19/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.19/#sink","text":"","title":"Sink"},{"location":"api/2.0.19/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.19/#source","text":"","title":"Source"},{"location":"api/2.0.19/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.19/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.2/","text":"API Docs - v2.0.2 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.2"},{"location":"api/2.0.2/#api-docs-v202","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.2"},{"location":"api/2.0.2/#sink","text":"","title":"Sink"},{"location":"api/2.0.2/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.2/#source","text":"","title":"Source"},{"location":"api/2.0.2/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.20/","text":"API Docs - v2.0.20 Tested Siddhi Core version: 5.1.26 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.20"},{"location":"api/2.0.20/#api-docs-v2020","text":"Tested Siddhi Core version: 5.1.26 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.20"},{"location":"api/2.0.20/#file","text":"","title":"File"},{"location":"api/2.0.20/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.20/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.20/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.20/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.20/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.20/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.20/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.20/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.20/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.20/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.20/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.20/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.20/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.20/#sink","text":"","title":"Sink"},{"location":"api/2.0.20/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.20/#source","text":"","title":"Source"},{"location":"api/2.0.20/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line. In such a scenario, the header line is not processed. false BOOL Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.20/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.22/","text":"API Docs - v2.0.22 Tested Siddhi Core version: 5.1.26 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. rename (Stream Function) This method can be used to rename a file/folder in a particular path, move a file from to a different path. Ex- file:rename('/User/wso2/source', 'User/wso2/destination') file:rename('/User/wso2/source/file.csv', 'User/wso2/source/newFile.csv') file:rename('/User/wso2/source/file.csv', 'User/wso2/destination/file.csv') Syntax file:rename( STRING uri, STRING new.destination.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be rename. STRING No Yes new.destination.name Absolute path of the new file/folder STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY: Realative path from ' Product_Home /wso2/server/' directory ,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file rename operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:rename( /User/wso2/source/ , User/wso2/destination/ ) Rename the file resides in 'source' folder to 'destination' folder. EXAMPLE 2 InputStream#file:rename( /User/wso2/folder/old.csv , User/wso2/folder/new.txt ) Rename 'old.csv' file resides in folder to 'new.txt' search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , header.line.count= INT , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line(s). In such a scenario, the header line(s) are not processed. Number of header lines can be configured via 'header.line.count' parameter. false BOOL Yes No header.line.count Number of lines to be considered as the file header. This parameter is applicable only if the parameter 'header.present' is set to 'true'. 1 INT Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"2.0.22"},{"location":"api/2.0.22/#api-docs-v2022","text":"Tested Siddhi Core version: 5.1.26 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.22"},{"location":"api/2.0.22/#file","text":"","title":"File"},{"location":"api/2.0.22/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.22/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.22/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.22/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.22/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.22/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.22/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.22/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.22/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.22/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.22/#rename-stream-function","text":"This method can be used to rename a file/folder in a particular path, move a file from to a different path. Ex- file:rename('/User/wso2/source', 'User/wso2/destination') file:rename('/User/wso2/source/file.csv', 'User/wso2/source/newFile.csv') file:rename('/User/wso2/source/file.csv', 'User/wso2/destination/file.csv') Syntax file:rename( STRING uri, STRING new.destination.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be rename. STRING No Yes new.destination.name Absolute path of the new file/folder STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY: Realative path from ' Product_Home /wso2/server/' directory ,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file rename operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:rename( /User/wso2/source/ , User/wso2/destination/ ) Rename the file resides in 'source' folder to 'destination' folder. EXAMPLE 2 InputStream#file:rename( /User/wso2/folder/old.csv , User/wso2/folder/new.txt ) Rename 'old.csv' file resides in folder to 'new.txt'","title":"rename (Stream Function)"},{"location":"api/2.0.22/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.22/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.22/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.22/#sink","text":"","title":"Sink"},{"location":"api/2.0.22/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/2.0.22/#source","text":"","title":"Source"},{"location":"api/2.0.22/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , header.line.count= INT , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line(s). In such a scenario, the header line(s) are not processed. Number of header lines can be configured via 'header.line.count' parameter. false BOOL Yes No header.line.count Number of lines to be considered as the file header. This parameter is applicable only if the parameter 'header.present' is set to 'true'. 1 INT Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/2.0.22/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"},{"location":"api/2.0.3/","text":"API Docs - v2.0.3 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.3"},{"location":"api/2.0.3/#api-docs-v203","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.3"},{"location":"api/2.0.3/#sink","text":"","title":"Sink"},{"location":"api/2.0.3/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.3/#source","text":"","title":"Source"},{"location":"api/2.0.3/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.4/","text":"API Docs - v2.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No No datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No No destination.dir.uri Absolute directory path of the the archived file. STRING No No archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No No destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No No include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No No is.directory This flag is used when creating file path is a directory STRING No No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No No destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No No include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No No destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No No exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.4"},{"location":"api/2.0.4/#api-docs-v204","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.4"},{"location":"api/2.0.4/#file","text":"","title":"File"},{"location":"api/2.0.4/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.4/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.4/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.4/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No No datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.4/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.4/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No No destination.dir.uri Absolute directory path of the the archived file. STRING No No archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.4/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No No destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No No include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.4/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No No is.directory This flag is used when creating file path is a directory STRING No No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.4/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.4/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No No destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No No include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.4/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.4/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.4/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No No destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No No exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.4/#sink","text":"","title":"Sink"},{"location":"api/2.0.4/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.4/#source","text":"","title":"Source"},{"location":"api/2.0.4/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.5/","text":"API Docs - v2.0.5 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.5"},{"location":"api/2.0.5/#api-docs-v205","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.5"},{"location":"api/2.0.5/#file","text":"","title":"File"},{"location":"api/2.0.5/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.5/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.5/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.5/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.5/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.5/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.5/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.5/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.5/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.5/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.5/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.5/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.5/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.5/#sink","text":"","title":"Sink"},{"location":"api/2.0.5/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.5/#source","text":"","title":"Source"},{"location":"api/2.0.5/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.6/","text":"API Docs - v2.0.6 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.","title":"2.0.6"},{"location":"api/2.0.6/#api-docs-v206","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.6"},{"location":"api/2.0.6/#file","text":"","title":"File"},{"location":"api/2.0.6/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.6/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.6/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.6/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.6/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.6/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.6/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.6/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.6/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.6/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.6/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.6/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.6/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.6/#sink","text":"","title":"Sink"},{"location":"api/2.0.6/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.6/#source","text":"","title":"Source"},{"location":"api/2.0.6/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.","title":"file (Source)"},{"location":"api/2.0.7/","text":"API Docs - v2.0.7 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No header.present This parameter used to specify a particular text file (eg: CSV) contains a header line or not. This can either have value true or false. If it's set to true then it indicates a file contains a header line, and it will not process false BOOL Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.","title":"2.0.7"},{"location":"api/2.0.7/#api-docs-v207","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.7"},{"location":"api/2.0.7/#file","text":"","title":"File"},{"location":"api/2.0.7/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.7/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.7/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.7/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.7/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.7/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.7/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.7/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.7/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.7/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.7/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.7/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.7/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.7/#sink","text":"","title":"Sink"},{"location":"api/2.0.7/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.7/#source","text":"","title":"Source"},{"location":"api/2.0.7/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No header.present This parameter used to specify a particular text file (eg: CSV) contains a header line or not. This can either have value true or false. If it's set to true then it indicates a file contains a header line, and it will not process false BOOL Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.","title":"file (Source)"},{"location":"api/2.0.8/","text":"API Docs - v2.0.8 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/tmp STRING Yes No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/temp/tmp.text STRING Yes No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No header.present This parameter used to specify a particular text file (eg: CSV) contains a header line or not. This can either have value true or false. If it's set to true then it indicates a file contains a header line, and it will not process false BOOL Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.","title":"2.0.8"},{"location":"api/2.0.8/#api-docs-v208","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.8"},{"location":"api/2.0.8/#file","text":"","title":"File"},{"location":"api/2.0.8/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.8/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.8/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.8/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.8/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.8/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.8/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.8/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.8/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.8/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.8/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.8/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.8/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.8/#sink","text":"","title":"Sink"},{"location":"api/2.0.8/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.8/#source","text":"","title":"Source"},{"location":"api/2.0.8/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/tmp STRING Yes No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/temp/tmp.text STRING Yes No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No header.present This parameter used to specify a particular text file (eg: CSV) contains a header line or not. This can either have value true or false. If it's set to true then it indicates a file contains a header line, and it will not process false BOOL Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.","title":"file (Source)"},{"location":"api/2.0.9/","text":"API Docs - v2.0.9 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/tmp STRING Yes No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/temp/tmp.text STRING Yes No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING Yes No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING Yes No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No header.present This parameter used to specify a particular text file (eg: CSV) contains a header line or not. This can either have value true or false. If it's set to true then it indicates a file contains a header line, and it will not process. false BOOL Yes No read.only.header This parameter used to read only the header or the first line of a particular text file (eg: CSV). This is only applicable if the mode is LINE. If it's set to false, the full file content will be read line by line. false BOOL Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. fileeventlistener (Source) Fileeventlistener provides the functionality for user to get the details of files which have been created or modified or deleted in the execution time. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri This parameter is used to specify a folder to be processed. All the files inside this directory will be processed. This uri MUST have the respective protocol specified. STRING No No monitoring.interval This parameter is used to specify the time interval (in milliseconds) that the process monitor the changes for. 100 STRING Yes No file.name.list This parameter is used to filter the files to be monitored in the given directory uri (dir.uri). The files should be entered comma separated eg: 'abc.txt,xyz.csv' STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; Under above configuration, An event is triggered if the files in the file.name.list gets created, modified or deleted. An event is created with the filepath, filename and status of the file. Then that will be received by the FooStream. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; Under above configuration, An event is triggered if any file under the given directory uri gets created, modified or deleted in the execution time. An event is created with the filepath, filename and status of the file.Then that will be received by the FooStream. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; Under above configuration, An event is triggered if any file under the given directory uri gets created, modified or deleted in the execution time. An event is created with the filepath, filename and status of the file. Then that will be received by the FooStream. If there are any changes a new event will be generated in every 200 milliseconds.","title":"2.0.9"},{"location":"api/2.0.9/#api-docs-v209","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.9"},{"location":"api/2.0.9/#file","text":"","title":"File"},{"location":"api/2.0.9/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/2.0.9/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/2.0.9/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/2.0.9/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/2.0.9/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/2.0.9/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/2.0.9/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes No exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/2.0.9/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri, STRING is.directory) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory STRING No Yes Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/2.0.9/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/2.0.9/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING uri, STRING destination.dir.uri) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:move( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file or directory path. STRING No Yes destination.dir.uri Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes No exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/2.0.9/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/2.0.9/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/2.0.9/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/2.0.9/#sink","text":"","title":"Sink"},{"location":"api/2.0.9/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.9/#source","text":"","title":"Source"},{"location":"api/2.0.9/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , read.only.header= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/tmp STRING Yes No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. file:/var/temp/tmp.text STRING Yes No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING Yes No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING Yes No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No file.read.wait.timeout This parameter is used to specify the maximum time period (in milliseconds) till it waits before retrying to read the full file content. 1000 STRING Yes No header.present This parameter used to specify a particular text file (eg: CSV) contains a header line or not. This can either have value true or false. If it's set to true then it indicates a file contains a header line, and it will not process. false BOOL Yes No read.only.header This parameter used to read only the header or the first line of a particular text file (eg: CSV). This is only applicable if the mode is LINE. If it's set to false, the full file content will be read line by line. false BOOL Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains valid json strings with keys 'symbol' and 'price'. Once a file is read, its content will be converted to an event using siddhi-map-json with additional eof attribute and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.","title":"file (Source)"},{"location":"api/2.0.9/#fileeventlistener-source","text":"Fileeventlistener provides the functionality for user to get the details of files which have been created or modified or deleted in the execution time. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri This parameter is used to specify a folder to be processed. All the files inside this directory will be processed. This uri MUST have the respective protocol specified. STRING No No monitoring.interval This parameter is used to specify the time interval (in milliseconds) that the process monitor the changes for. 100 STRING Yes No file.name.list This parameter is used to filter the files to be monitored in the given directory uri (dir.uri). The files should be entered comma separated eg: 'abc.txt,xyz.csv' STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; Under above configuration, An event is triggered if the files in the file.name.list gets created, modified or deleted. An event is created with the filepath, filename and status of the file. Then that will be received by the FooStream. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; Under above configuration, An event is triggered if any file under the given directory uri gets created, modified or deleted in the execution time. An event is created with the filepath, filename and status of the file.Then that will be received by the FooStream. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; Under above configuration, An event is triggered if any file under the given directory uri gets created, modified or deleted in the execution time. An event is created with the filepath, filename and status of the file. Then that will be received by the FooStream. If there are any changes a new event will be generated in every 200 milliseconds.","title":"fileeventlistener (Source)"},{"location":"api/latest/","text":"API Docs - v2.0.22 Tested Siddhi Core version: 5.1.26 It could also support other Siddhi Core minor versions. File isDirectory (Function) This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean. isExist (Function) This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean . isFile (Function) This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean. lastModifiedTime (Function) Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format. size (Function) This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned. archive (Stream Function) Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar. copy (Stream Function) This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder. create (Stream Function) Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'. delete (Stream Function) Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path. move (Stream Function) This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder. rename (Stream Function) This method can be used to rename a file/folder in a particular path, move a file from to a different path. Ex- file:rename('/User/wso2/source', 'User/wso2/destination') file:rename('/User/wso2/source/file.csv', 'User/wso2/source/newFile.csv') file:rename('/User/wso2/source/file.csv', 'User/wso2/destination/file.csv') Syntax file:rename( STRING uri, STRING new.destination.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be rename. STRING No Yes new.destination.name Absolute path of the new file/folder STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY: Realative path from ' Product_Home /wso2/server/' directory ,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file rename operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:rename( /User/wso2/source/ , User/wso2/destination/ ) Rename the file resides in 'source' folder to 'destination' folder. EXAMPLE 2 InputStream#file:rename( /User/wso2/folder/old.csv , User/wso2/folder/new.txt ) Rename 'old.csv' file resides in folder to 'new.txt' search (Stream Function) Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path. searchInArchive (Stream Function) This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path. unarchive (Stream Function) This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder. Sink file (Sink) The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it. Source file (Source) The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , header.line.count= INT , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line(s). In such a scenario, the header line(s) are not processed. Number of header lines can be configured via 'header.line.count' parameter. false BOOL Yes No header.line.count Number of lines to be considered as the file header. This parameter is applicable only if the parameter 'header.present' is set to 'true'. 1 INT Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted. fileeventlistener (Source) The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"latest"},{"location":"api/latest/#api-docs-v2022","text":"Tested Siddhi Core version: 5.1.26 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.22"},{"location":"api/latest/#file","text":"","title":"File"},{"location":"api/latest/#isdirectory-function","text":"This function checks for a given file path points to a directory Syntax BOOL file:isDirectory( STRING uri) BOOL file:isDirectory( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The path to be checked for a directory. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isDirectory(filePath) as isDirectory Checks whether the given path is a directory. Result will be returned as an boolean.","title":"isDirectory (Function)"},{"location":"api/latest/#isexist-function","text":"This function checks whether a file or a folder exists in a given path Syntax BOOL file:isExist( STRING uri) BOOL file:isExist( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to check for existence. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isExist( /User/wso2/source/test.txt ) as exists Checks existence of a file in the given path. Result will be returned as an boolean . EXAMPLE 2 file:isExist( /User/wso2/source/ ) as exists Checks existence of a folder in the given path. Result will be returned as an boolean .","title":"isExist (Function)"},{"location":"api/latest/#isfile-function","text":"This function checks for a given file path points to a file Syntax BOOL file:isFile( STRING file.path) BOOL file:isFile( STRING file.path, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path The path to be checked for a file. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:isFile(filePath) as isFile Checks whether the given path is a file. Result will be returned as an boolean.","title":"isFile (Function)"},{"location":"api/latest/#lastmodifiedtime-function","text":"Checks for the last modified time for a given file path Syntax STRING file:lastModifiedTime( STRING uri) STRING file:lastModifiedTime( STRING uri, STRING datetime.format) STRING file:lastModifiedTime( STRING uri, STRING datetime.format, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri File path to be checked for te last modified time. STRING No Yes datetime.format Format of the last modified datetime to be returned. MM/dd/yyyy HH:mm:ss STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:lastModifiedTime(filePath) as lastModifiedTime Last modified datetime of a file will be returned as an string in MM/dd/yyyy HH:mm:ss. EXAMPLE 2 file:lastModifiedTime(filePath, dd/MM/yyyy HH:mm:ss) as lastModifiedTime Last modified datetime of a file will be returned as an string in 'dd/MM/yyyy HH:mm:ss' format.","title":"lastModifiedTime (Function)"},{"location":"api/latest/#size-function","text":"This function checks for a given file's size Syntax LONG file:size( STRING uri) LONG file:size( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path to the file or directory to be checked for the size. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:size( /User/wso2/source/test.txt ) as fileSize Size of a file in a given path will be returned.","title":"size (Function)"},{"location":"api/latest/#archive-stream-function","text":"Archives files and folders as a zip or in tar format that are available in the given file uri. Syntax file:archive( STRING uri, STRING destination.dir.uri) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories) file:archive( STRING uri, STRING destination.dir.uri, STRING archive.type, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory STRING No Yes destination.dir.uri Absolute directory path of the the archived file. STRING No Yes archive.type Archive type can be zip or tar zip STRING Yes No include.by.regexp Only the files matching the patterns will be archived. Note: Add an empty string to match all files STRING Yes No exclude.subdirectories This flag is used to exclude the subdirectories and its files without archiving. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file.zip ) Archives to_be_archived folder in zip format and stores archive_destination folder as file.zip. EXAMPLE 2 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar ) Archives to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 3 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , tar , .*test3.txt$ ) Archives files which adheres to '.*test3.txt$' regex in to_be_archived folder in tar format and stores in archive_destination folder as file.tar. EXAMPLE 4 InputStream#file:archive( /User/wso2/to_be_archived , /User/wso2/archive_destination/file , , , false ) Archives to_be_archived folder excluding the sub-folders in zip format and stores in archive_destination folder as file.tar.","title":"archive (Stream Function)"},{"location":"api/latest/#copy-stream-function","text":"This function performs copying file from one directory to another. Syntax file:copy( STRING uri, STRING destination.dir.uri) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir) file:copy( STRING uri, STRING destination.dir.uri, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the File or the directory. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be copied. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir This flag is used to exclude parent folder when copying the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file copying operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:copy( /User/wso2/source/test.txt , User/wso2/destination/ ) Copies 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ ) Copies 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Copies 'source' folder to the 'destination' folder ignoring files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:copy( /User/wso2/source/ , User/wso2/destination/ , , true) Copies only the files resides in 'source' folder to 'destination' folder.","title":"copy (Stream Function)"},{"location":"api/latest/#create-stream-function","text":"Create a file or a folder in the given location Syntax file:create( STRING uri) file:create( STRING uri, BOOL is.directory) file:create( STRING uri, BOOL is.directory, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path which needs to be created. STRING No Yes is.directory This flag is used when creating file path is a directory false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from CreateFileStream#file:create( /User/wso2/source/test.txt , false) Creates a file in the given path with the name of 'test.txt'. EXAMPLE 2 from CreateFileStream#file:create( /User/wso2/source/ , true) Creates a folder in the given path with the name of 'source'.","title":"create (Stream Function)"},{"location":"api/latest/#delete-stream-function","text":"Deletes file/files in a particular path Syntax file:delete( STRING uri) file:delete( STRING uri, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be deleted. STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 from DeleteFileStream#file:delete( /User/wso2/source/test.txt ) Deletes the file in the given path. EXAMPLE 2 from DeleteFileStream#file:delete( /User/wso2/source/ ) Deletes the folder in the given path.","title":"delete (Stream Function)"},{"location":"api/latest/#move-stream-function","text":"This function performs copying file from one directory to another. Syntax file:move( STRING path, STRING destination.dir.path) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir) file:move( STRING path, STRING destination.dir.path, STRING include.by.regexp, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic path Absolute file or directory path. STRING No Yes destination.dir.path Absolute file path to the destination directory. Note: Parent folder structure will be created if it does not exist. STRING No Yes include.by.regexp Only the files matching the patterns will be moved. Note: Add an empty string to match all files STRING Yes Yes exclude.root.dir Exclude parent folder when moving the content. false BOOL Yes Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file moving operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:move( /User/wso2/source/test.txt , User/wso2/destination/ ) Moves 'test.txt' in 'source' folder to the 'destination' folder. EXAMPLE 2 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ ) Moves 'source' folder to the 'destination' folder with all its content EXAMPLE 3 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , .*test3.txt$ ) Moves 'source' folder to the 'destination' folder excluding files doesnt adhere to the given regex. EXAMPLE 4 InputStream#file:move( /User/wso2/source/ , User/wso2/destination/ , , true) Moves only the files resides in 'source' folder to 'destination' folder.","title":"move (Stream Function)"},{"location":"api/latest/#rename-stream-function","text":"This method can be used to rename a file/folder in a particular path, move a file from to a different path. Ex- file:rename('/User/wso2/source', 'User/wso2/destination') file:rename('/User/wso2/source/file.csv', 'User/wso2/source/newFile.csv') file:rename('/User/wso2/source/file.csv', 'User/wso2/destination/file.csv') Syntax file:rename( STRING uri, STRING new.destination.name) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file or the directory to be rename. STRING No Yes new.destination.name Absolute path of the new file/folder STRING No Yes file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY: Realative path from ' Product_Home /wso2/server/' directory ,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types isSuccess Status of the file rename operation (true if success) BOOL Examples EXAMPLE 1 InputStream#file:rename( /User/wso2/source/ , User/wso2/destination/ ) Rename the file resides in 'source' folder to 'destination' folder. EXAMPLE 2 InputStream#file:rename( /User/wso2/folder/old.csv , User/wso2/folder/new.txt ) Rename 'old.csv' file resides in folder to 'new.txt'","title":"rename (Stream Function)"},{"location":"api/latest/#search-stream-function","text":"Searches files in a given folder and lists. Syntax file:search( STRING uri) file:search( STRING uri, STRING include.by.regexp) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories) file:search( STRING uri, STRING include.by.regexp, BOOL exclude.subdirectories, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the directory. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes Yes exclude.subdirectories This flag is used to exclude the files un subdirectories when listing. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The lit file name matches in the directory. OBJECT Examples EXAMPLE 1 ListFileStream#file:search(filePath) This will list all the files (also in sub-folders) in a given path. EXAMPLE 2 ListFileStream#file:search(filePath, .*test3.txt$ ) This will list all the files (also in sub-folders) which adheres to a given regex file pattern in a given path. EXAMPLE 3 ListFileStream#file:search(filePath, .*test3.txt$ , true) This will list all the files excluding the files in sub-folders which adheres to a given regex file pattern in a given path.","title":"search (Stream Function)"},{"location":"api/latest/#searchinarchive-stream-function","text":"This. Syntax file:searchInArchive( STRING uri) file:searchInArchive( STRING uri, STRING include.by.regexp) file:searchInArchive( STRING uri, STRING include.by.regexp, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute file path of the zip or tar file. STRING No Yes include.by.regexp Only the files matching the patterns will be searched. Note: Add an empty string to match all files STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Extra Return Attributes Name Description Possible Types fileNameList The list file names in the archived file. OBJECT Examples EXAMPLE 1 ListArchivedFileStream#file:listFilesInArchive(filePath) Lists the files inside the compressed file in the given path. EXAMPLE 2 ListArchivedFileStream#file:listFilesInArchive(filePath, .*test3.txt$ ) Filters file names adheres to the given regex and lists the files inside the compressed file in the given path.","title":"searchInArchive (Stream Function)"},{"location":"api/latest/#unarchive-stream-function","text":"This function decompresses a given file Syntax file:unarchive( STRING uri, STRING destination.dir.uri) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir) file:unarchive( STRING uri, STRING destination.dir.uri, BOOL exclude.root.dir, STRING file.system.options) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri Absolute path of the file to be decompressed in the format of zip or tar. STRING No Yes destination.dir.uri Absolute path of the destination directory. Note: If the folder structure does not exist, it will be created. STRING No Yes exclude.root.dir This flag excludes parent folder when extracting the content. false BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 file:unarchive( /User/wso2/source/test.zip , /User/wso2/destination ) Unarchive a zip file in a given path to a given destination. EXAMPLE 2 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination ) Unarchive a tar file in a given path to a given destination. EXAMPLE 3 file:unarchive( /User/wso2/source/test.tar , /User/wso2/destination , true) Unarchive a tar file in a given path to a given destination excluding the root folder.","title":"unarchive (Stream Function)"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#file-sink","text":"The File Sink component of the 'siddhi-io-fie' extension publishes (writes) event data that is processed within Siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type= file , file.uri= STRING , append= BOOL , add.line.separator= BOOL , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri The path to thee file in which the data needs to be published. STRING No Yes append This specifies whether the data should be appended to the file or not. If this parameter is set to 'true', data is written at the end of the file without changing the existing content. If the parameter is set to 'false', the existing content of the file is deleted and the content you are publishing is added to replace it. If the file does not exist, a new file is created and then the data is written in it. In such a scenario, the value specified for this parameter is not applicable true BOOL Yes No add.line.separator If this parameter is set to 'true', events added to the file are separated by adding each event in a new line. true. (However, if the 'csv' mapper is used, it is false) BOOL Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @sink(type= file , @map(type= json ), append= false , file.uri= /abc/{{symbol}}.txt ) define stream BarStream (symbol string, price float, volume long); In the above configuration, each output event is published in the '/abc/{{symbol}}.txt' file in JSON format.The output looks as follows: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } If the file does not exist at the time an output event is generated, the system creates the file and proceeds to publish the output event in it.","title":"file (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#file-source","text":"The File Source component of the 'siddhi-io-fie' extension allows you to receive the input data to be processed by Siddhi via files. Both text files and binary files are supported. Syntax @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.if.exist.mode= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , file.read.wait.timeout= STRING , header.present= BOOL , header.line.count= INT , read.only.header= BOOL , read.only.trailer= BOOL , skip.trailer= BOOL , buffer.size= STRING , cron.expression= STRING , file.name.pattern= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// DIRECTORY_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/tmp STRING Yes No file.uri The path to the file to be processed. The URI specified must include the file handling protocol to be used for file processing. Only one of 'dir.uri' and 'file.uri' should be provided. e.g., If the file handling protocol to be used is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. At a given time, you should provide a value only for one out of the 'dir.uri' and 'file.uri' parameters. You can provide the directory URI if you have multiple files that you want to process within a directory. You can provide the file URI if you only need to process one file. file:/var/temp/tmp.text STRING Yes No mode This specifies the mode in which the files in given directory must be read.Possible values for this parameter are as follows: - TEXT.FULL : to read a text file completely at once. - BINARY.FULL : to read a binary file completely at once. - BINARY.CHUNKED : to read a binary file chunk by chunk. - LINE : to read a text file line by line. - REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing If this parameter is set to 'true', the file/the first file of the directory is tailed. Do not set the parameter to 'true' and enable tailing if the mode is 'binary.full', 'text.full' or 'binary.chunked'. true BOOL Yes No action.after.process The action to be carried out after processing the file/directory. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.process' parameter to indicate the location to which the consumed files should be moved. delete STRING Yes No action.after.failure The action to be taken if a failure occurs while the file/directory is being processed. Possible values are 'DELETE' and 'MOVE'. 'DELETE' is default. If you specify 'MOVE', you need to specify a value for the 'move.after.failure' parameter to indicate the location to which the files that could not be read need to be moved delete STRING Yes No move.after.process If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify the location to which the consumed files need to be moved.This should be the absolute path of the file that is going to be created after the moving is done. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No move.if.exist.mode If you specify 'MOVE' as the value for the 'action.after.process' parameter, use this parameter to specify what happens if a file exist in the same location.Possible values are 'OVERWRITE' and 'KEEP' where KEEP will append a UUID to existing filename and keep both files while OVERWRITE will simply overwrite the existing file. STRING Yes No move.after.failure If you specify 'MOVE' as the value for the 'action.after.failure' parameter, use this parameter to specify the location to which the files should be moved after the failure This should be the absolute path of the file that is going to be created after the failure. This URI must include the file handling protocol used for file processing. e.g., If the file handling protocol is 'ftp', the URI must be provided as 'ftp:// FILE_PATH '. STRING Yes No begin.regex The regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex The regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval The time interval (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval The time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout The maximum time duration (in milliseconds) that the system should wait until a file is processed. 5000 STRING Yes No file.read.wait.timeout The maximum time duration (in milliseconds) that the system should wait before retrying to read the full file content. 1000 STRING Yes No header.present If this parameter is set to 'true', it indicates the file(s) to be processed includes a header line(s). In such a scenario, the header line(s) are not processed. Number of header lines can be configured via 'header.line.count' parameter. false BOOL Yes No header.line.count Number of lines to be considered as the file header. This parameter is applicable only if the parameter 'header.present' is set to 'true'. 1 INT Yes No read.only.header This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the first line (i.e., the header line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No read.only.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) is read. If it is set to 'false', the full content of the file is read line by line. This will only work if trailer appears once at the last line of file. false BOOL Yes No skip.trailer This parameter is applicable only if the value for the 'mode' parameter is 'LINE'. If this parameter is set to 'true', only the last line (i.e., the trailer line) of a text file (e.g., CSV) will be skipped. If it is set to 'false', the full content of the file is read line by line. false BOOL Yes No buffer.size This parameter used to get the buffer size for binary.chunked mode. 65536 STRING Yes No cron.expression This is used to specify a timestamp in cron expression. The file or files in the given dir.uri or file.uri will be processed when the given expression satisfied by the system time. None STRING Yes No file.name.pattern Regex pattern for the filenames that should be read from the directory. Note: This parameter is applicable only if the connector is reading from a directory STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that all the files contain valid json strings with 'symbol', 'price', and 'volume' keys. Once a file is read, its content is converted to events via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Finally, after the reading is completed, the file is deleted. EXAMPLE 2 @source(type= file , mode= files.repo.line , tailing= true , dir.uri= file://abc/xyz , @map(type= json )) define stream FooStream (symbol string, price float, volume long); In the above configuration, the first file in '/abc/xyz' directory is picked and read line by line. Here, it is assumed that the file contains lines json strings. For each line, the line content is converted to an event via the 'siddhi-map-json' extension. Those events are then received as input events in the the 'FooStream' stream. Once the file content is completely read, the system keeps checking for new entries added to the file. If it detects a new entry, it immediately picks it up and processes it. EXAMPLE 3 @source(type= file , mode= text.full , tailing= false dir.uri= file://abc/xyz , action.after.process= delete , @map(type= csv @attributes(eof = trp:eof , fp = trp:file.path ))) define stream FooStream (symbol string, price float, volume long); In the above configuration, all the files in the given directory are picked and read one by one. Here, it is assumed that each file contains valid json strings with 'symbol', and 'price' keys. Once a file is read, its content is converted to an event via the 'siddhi-map-json' extension with the additional 'eof' attribute. Then, that event is received as an input event in the 'FooStream' stream. Once a file is completely read, it is deleted.","title":"file (Source)"},{"location":"api/latest/#fileeventlistener-source","text":"The 'fileeventlistener' component of the 'siddhi-io-fie' extension allows you to get the details of files that have been created, modified or deleted during execution time.Supports listening to local folder/file paths. Syntax @source(type= fileeventlistener , dir.uri= STRING , monitoring.interval= STRING , file.name.list= STRING , file.system.options= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri The path to the directory to be processed. During execution time, Siddhi by default processes all the files within this directory. However, if you have entered specific files to be processed via the 'file.name.list' parameter, only those files are processed. The URI specified must include the file handling protocol to be used for file processing. STRING No No monitoring.interval The time duration (in milliseconds) for which the system must monitor changes to the files in the specified directory. 100 STRING Yes No file.name.list If you want to carry out processing for only for one or more specific files in the the given directory URI, you can use this parameter to specify those files as a comma-separated list. e.g., 'abc.txt,xyz.csv' STRING Yes No file.system.options The file options in key:value pairs separated by commas. eg:'USER_DIR_IS_ROOT:false,PASSIVE_MODE:true,AVOID_PERMISSION_CHECK:true,IDENTITY:file://demo/.ssh/id_rsa,IDENTITY_PASS_PHRASE:wso2carbon' Note: when IDENTITY is used, use a RSA PRIVATE KEY STRING Yes No Examples EXAMPLE 1 @source(type= fileeventlistener , dir.uri= file://abc/xyz, file.name.list = xyz.txt, test ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file named either 'xyz.txt' or 'test' gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 2 @source(type= fileeventlistener ,dir.uri= file://abc/xyz ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file. EXAMPLE 3 @source(type= fileeventlistener ,dir.uri= file://abc/xyz , monitoring.interval= 200 ) define stream FileListenerStream (filepath string, filename string, status string); @sink(type= log ) define stream FooStream (filepath string, filename string, status string); from FileListenerStream select * insert into FooStream; In the above configuration, the system monitors the given directory URI every 200 milliseconds to check whether any file gets created, modified or deleted. If any such activity is detected, an input event is generated in the 'FooStream' stream. The information included in the event are the filepath, filename, and the status of the file.","title":"fileeventlistener (Source)"}]}